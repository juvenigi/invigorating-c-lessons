* First lesson in C programming

Essentially, the whole lesson consisted of people desperately trying to get their IDEs to work and GCC to compile under Windows.
Thankfully, I am an egotistical Ubuntu user who has ==gcc== already installed. All it took is a small line of emacs dotfile configuration.

#+BEGIN_SRC emacs-lisp
(defun gcc-compile ()
"quick compilation using gcc"
(compile (concat "gcc -Wall -pedantic -ggdb -o test " buffer-file-name " -lm"))) ; -lm is a default c math library.

;; to set the key without possibly overriding anything, use global-set-key.
;; emacs is kinda weird since they have four levels of privilege when it comes to keybinds.
(global-set-key (kbd "C-c k") '(lambda () (interactive) (gcc-compile)))
#+END_SRC

As you can see, this set up is a bit clunky, because linking libraries is done by editing the dotfile. A way better method is to set up ==make== or ==cmake== to take care of the build process, but oh well.
In the end, editing the dotfile is in a way working with a makefile, more or less.

I also suggest installing spacemacs because it is less bare-bone than the default editor and has some nice features too.

No actual C files were supposed to be produced that day.

* Second lesson in C programming

This time around, it was assumed that people had managed to wrangle their cygwin into submission, after all they were given plenty of time to do so the day before.

Finally, some code!

** Important note:

 I usually disdain from using my own defined math functions, because that potentially introduces a list of stupid bugs that pretty much slow down the coding process. I mean, technically, the code for math functions is supposed to be correct and accurate, but I'd rather have one functioning program than 0 functioning programs because of a screwy algorithm.

** Code
*** Location
 [[../../src/helpers/mymath.c]]
*** Description
**** TASK 1: sum up odd numbers ranging from 1 to 15
**** TASK 2: find errors in a shitty piece of code
  (honestly I just ignore this crap or do it orally)
**** TASK 3: a simple prime number checker
**** TASK 4: a slightly naive square root algorithm
**** TASK 5: greatest common divisor (integer numbers)
**** TASK 6: a cosine function without factorial (because integer overflow happens otherwise)

* Third lesson in C programming

More math functions, yay!

** Code

*** TASK1: sign function sgn(x)
*** TASK2: another stupid find 6 errors task
*** TASK3: recursively-defined power function
*** TASK4: intentially shitty naive power function
*** TASK5: task 3 without recursion
*** TASK6: expo function expo(x) := e^x
*** TASK7: natural log function ln(x)
* Fourth lesson in C Programming

We have discovered how headers work, and I have not discovered how to generate them quickly in emacs /(there has got to be a way!)/

** Code

*** TASK1: write =mymath.c= and =mymath.h= as a user library for math functions that were made till this point (l2-l3)
*** TASK2: write a log(base,x) (in =mymath=)
*** TASK3: factorial =mymath=
*** TASK4: kth root
*** TASK5: use cosine law to find a side of a tringle knowing two sides and an enclosing angle.
*** TASK6: binomial equation solver (real roots)
*** TASK7: Reeman Zeta function (real numbers only)
*** TASK8: add all elements of an array together iteratively

* Fifth lesson in C Programming

Arrays exist, huh?

** Code

*** TASK1: find mistakes in some crappy code (ignored)

*** TASK2: largest array element function

*** TASK3: test if two arrays are identical (return boolean)

*** TASK4: seek a value in array and replace it with other (replace all?)

*** TASK5: just sort an array, okay (insertion/merge is probably decent choices for this)

*** TASK6: algebraic solution for a quadtratic equation (real roots only)

*** TASK7: square function which works with pointers

*** TASK8: sqrt function which operates using pointers

* Sixth lesson in C Progrmming

** Code

*** TASK1: play around with pointers (honestly just do this on your own)

*** TASK2: write a function which frees up an array (why create an unnecessary wrapper?)

*** TASK3: print an array with comma-separated OR space-separated values

*** TASK4: sort an array (duplicate of a previous assignment)

*** TASK5: write the same value for all array elements

*** TASK6: rotk shift array elements by k position

*** TASK7: flip an array (arr[0] = arr[max]

*** TASK8: search an array (sequence) in another array
Output the location (first index) if found. Otherwise output -1

*** TASK9: vector addition (1d double arrays)

*** TASK10: vector dot product

*** TASK11: implement mergesort

int *merge(int list1, int n, int *list2, int m);
void mergesort(int *list1 int n)

